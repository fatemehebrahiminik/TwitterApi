// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TwitterServer.Data;

#nullable disable

namespace TwitterServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TwitterServer.DataLayer.Models.FollowUser", b =>
                {
                    b.Property<Guid>("FollowerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TwitterUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("FollowerUserId", "TwitterUserId");

                    b.HasIndex("TwitterUserId");

                    b.ToTable("FollowUserTb");
                });

            modelBuilder.Entity("TwitterServer.DataLayer.Models.Retweet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("RetweetDatetime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RetweetUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TwitteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TwitteId");

                    b.ToTable("RetweetTb");
                });

            modelBuilder.Entity("TwitterServer.DataLayer.Models.Twitte", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TwitteText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TwitterUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TwitterUserId");

                    b.ToTable("TwitteTb");
                });

            modelBuilder.Entity("TwitterServer.DataLayer.Models.TwitterUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RetweetId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RetweetId");

                    b.ToTable("TwitterUserTb");
                });

            modelBuilder.Entity("TwitterServer.DataLayer.Models.FollowUser", b =>
                {
                    b.HasOne("TwitterServer.DataLayer.Models.TwitterUser", "FollowerUser")
                        .WithMany("Following")
                        .HasForeignKey("FollowerUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TwitterServer.DataLayer.Models.TwitterUser", "TwitterUser")
                        .WithMany("Followers")
                        .HasForeignKey("TwitterUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FollowerUser");

                    b.Navigation("TwitterUser");
                });

            modelBuilder.Entity("TwitterServer.DataLayer.Models.Retweet", b =>
                {
                    b.HasOne("TwitterServer.DataLayer.Models.Twitte", "Twitte")
                        .WithMany()
                        .HasForeignKey("TwitteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Twitte");
                });

            modelBuilder.Entity("TwitterServer.DataLayer.Models.Twitte", b =>
                {
                    b.HasOne("TwitterServer.DataLayer.Models.TwitterUser", "TwitterUser")
                        .WithMany("Twittes")
                        .HasForeignKey("TwitterUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TwitterUser");
                });

            modelBuilder.Entity("TwitterServer.DataLayer.Models.TwitterUser", b =>
                {
                    b.HasOne("TwitterServer.DataLayer.Models.Retweet", null)
                        .WithMany("TwitterUsers")
                        .HasForeignKey("RetweetId");
                });

            modelBuilder.Entity("TwitterServer.DataLayer.Models.Retweet", b =>
                {
                    b.Navigation("TwitterUsers");
                });

            modelBuilder.Entity("TwitterServer.DataLayer.Models.TwitterUser", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("Twittes");
                });
#pragma warning restore 612, 618
        }
    }
}
